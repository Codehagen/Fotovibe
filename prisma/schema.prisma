generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

// Core User Models
model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  phone     String?
  avatar    String?
  language  String?  @default("english")
  bio       String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  isSuperUser   Boolean        @default(false)
  role          String?        @default("user")
  workspaces    Workspace[]    @relation("UserWorkspace")
  notifications Notification[]
  feedback      Feedback[]
  auditLogs     AuditLog[]

  @@index([email])
  @@index([role])
  @@index([email, role])
  @@map(name: "users")
}

model Photographer {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  phone     String?
  avatar    String?
  bio       String?
  language  String?  @default("english")
  clerkId   String?  @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  orders   Order[]
  feedback Feedback[]

  @@index([email])
  @@index([name])
  @@index([email, name])
  @@map(name: "photographers")
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  orgnr     String   @unique
  address   String
  city      String
  zip       String
  maxUsers  Int      @default(5)
  industry  String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  users         User[]         @relation("UserWorkspace")
  orders        Order[]
  media         Media[]
  invoices      Invoice[]
  subscriptions Subscription[]

  preferredDays  String[]
  preferredTimes String[]

  @@index([orgnr])
  @@index([city])
  @@index([name])
  @@index([orgnr, name])
  @@map(name: "workspaces")
}

// Subscription & Billing Models
model Plan {
  id             String         @id @default(cuid())
  name           String
  price          Float
  currency       String         @default("NOK")
  interval       String
  photosPerMonth Int
  videosPerMonth Int?
  maxLocations   Int            @default(1)
  features       Json?
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now()) @map(name: "created_at")
  updatedAt      DateTime       @default(now()) @map(name: "updated_at")
  subscriptions  Subscription[]

  @@index([isActive])
  @@map(name: "plans")
}

model Subscription {
  id              String    @id @default(cuid())
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id])
  planId          String
  plan            Plan      @relation(fields: [planId], references: [id])
  status          String
  startDate       DateTime
  endDate         DateTime?
  nextBillingDate DateTime
  cancelledAt     DateTime?
  pausedAt        DateTime?
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @default(now()) @map(name: "updated_at")

  @@index([workspaceId])
  @@index([planId])
  @@index([status])
  @@index([nextBillingDate])
  @@map(name: "subscriptions")
}

model Invoice {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  amount      Float
  status      String
  dueDate     DateTime
  fikenId     String?
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @default(now()) @map(name: "updated_at")

  paymentHistory PaymentHistory[]

  @@index([status])
  @@index([workspaceId, status])
  @@index([dueDate])
  @@map(name: "invoices")
}

model PaymentHistory {
  id        String   @id @default(cuid())
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  status    String
  amount    Float
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@index([status])
  @@index([invoiceId, status])
  @@map(name: "payment_history")
}

// Order & Media Models
model Order {
  id             String        @id @default(cuid())
  workspace      Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId    String
  photographer   Photographer? @relation(fields: [photographerId], references: [id])
  photographerId String?
  editor         Editor?       @relation(fields: [editorId], references: [id])
  editorId       String?
  status         OrderStatus
  orderDate      DateTime      @default(now())
  scheduledDate  DateTime?
  location       String
  requirements   String?
  photoCount     Int?
  videoCount     Int?
  deliveryDate   DateTime?
  cancelReason   String?
  media          Media[]

  // Workflow tracking
  startedAt        DateTime?
  editingStartedAt DateTime?
  reviewStartedAt  DateTime?
  completedAt      DateTime?
  uploadedAt       DateTime?

  // Status history
  statusHistory StatusHistory[]

  checklist       OrderChecklist?
  EditorChecklist EditorChecklist?

  @@index([workspaceId])
  @@index([photographerId])
  @@index([editorId])
  @@index([scheduledDate])
  @@index([status])
  @@map(name: "orders")
}

model Media {
  id          String    @id @default(cuid())
  orderId     String?
  order       Order?    @relation(fields: [orderId], references: [id])
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  type        String
  url         String?
  thumbnail   String?
  title       String?
  description String?
  metadata    Json?
  tags        String[]
  status      String // 'raw', 'edited', 'approved', 'rejected'
  size        Int?
  duration    Int?
  format      String?

  // Editor tracking
  editedBy   String? // Editor ID
  editedAt   DateTime?
  approvedBy String? // Photographer ID
  approvedAt DateTime?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@index([orderId])
  @@index([workspaceId])
  @@index([type, status])
  @@map(name: "media")
}

// Feedback & Notification Models
model Feedback {
  id             String        @id @default(cuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  photographerId String?
  photographer   Photographer? @relation(fields: [photographerId], references: [id])
  editorId       String?
  editor         Editor?       @relation(fields: [editorId], references: [id])
  rating         Int
  comment        String?
  createdAt      DateTime      @default(now()) @map(name: "created_at")

  @@index([userId])
  @@index([photographerId])
  @@index([editorId])
  @@index([rating])
  @@map(name: "feedback")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")

  @@index([userId, read])
  @@index([type])
  @@map(name: "notifications")
}

// System & Analytics Models
model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  entity    String
  entityId  String
  timestamp DateTime @default(now()) @map(name: "timestamp")

  @@index([userId, entity])
  @@index([timestamp])
  @@map(name: "audit_logs")
}

model AdminSettings {
  id        String   @id @default(cuid())
  key       String
  value     String
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@unique([key])
  @@map(name: "admin_settings")
}

model Stats {
  id                  String   @id @default(cuid())
  totalAccounts       Int      @default(0)
  totalOrders         Int      @default(0)
  totalWorkspaces     Int      @default(0)
  totalPhotographers  Int      @default(0)
  activeSubscriptions Int      @default(0)
  totalRevenue        Float    @default(0)
  monthlyRevenue      Float    @default(0)
  totalPhotos         Int      @default(0)
  totalVideos         Int      @default(0)
  averageRating       Float    @default(0)
  completedOrders     Int      @default(0)
  cancelledOrders     Int      @default(0)
  totalStorage        Float    @default(0) // in GB
  lastUpdated         DateTime @default(now())

  // Monthly stats
  photosThisMonth  Int   @default(0)
  videosThisMonth  Int   @default(0)
  ordersThisMonth  Int   @default(0)
  revenueThisMonth Float @default(0)

  // Customer satisfaction
  averageResponseTime  Float @default(0) // in hours
  customerSatisfaction Float @default(0) // 0-100
  photographerRatings  Json? // Detailed rating breakdown

  @@map(name: "stats")
}

// Add OrderStatus enum for better type safety
enum OrderStatus {
  PENDING_PHOTOGRAPHER
  NOT_STARTED
  IN_PROGRESS
  EDITING
  IN_REVIEW
  COMPLETED
  CANCELLED
}

// Add EditorRole
model Editor {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  phone     String?
  avatar    String?
  bio       String?
  language  String?  @default("norwegian")
  clerkId   String?  @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  orders   Order[]
  feedback Feedback[]

  @@map(name: "editors")
}

// Add StatusHistory model to track status changes
model StatusHistory {
  id        String      @id @default(cuid())
  orderId   String
  order     Order       @relation(fields: [orderId], references: [id])
  status    OrderStatus
  changedBy String // User ID who changed the status
  notes     String?
  createdAt DateTime    @default(now())

  @@index([orderId])
  @@map(name: "status_history")
}

// Add this new model
model OrderChecklist {
  id          String    @id @default(cuid())
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     String    @unique
  contactedAt DateTime?
  scheduledAt DateTime?
  dropboxUrl  String?
  uploadedAt  DateTime?
  updatedAt   DateTime  @updatedAt

  // Additional fields for better tracking
  contactNotes    String? // Notes from customer contact
  schedulingNotes String? // Any special scheduling notes
  uploadNotes     String? // Notes about the upload

  @@map(name: "order_checklists")
}

model EditorChecklist {
  id               String    @id @default(cuid())
  order            Order     @relation(fields: [orderId], references: [id])
  orderId          String    @unique
  editingStartedAt DateTime?
  uploadedAt       DateTime?
  completedAt      DateTime?
  updatedAt        DateTime  @updatedAt

  @@map(name: "editor_checklists")
}
